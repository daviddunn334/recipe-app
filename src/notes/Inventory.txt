import { useEffect, useState } from "react";
import { FaTrash, FaPlus } from "react-icons/fa";
import supabase from "../supabase";



const InventoryManagement = () => {
  const [inventory, setInventory] = useState([]);
  const [newItem, setNewItem] = useState({
    name: "",
    category: "",
    serialNumber: "",
    batchNumber: "",
    quantity: 1,
  });

  // Fetch inventory from the database
  useEffect(() => {
    fetchInventory();
  }, []);

  const fetchInventory = async () => {
    const { data, error } = await supabase.from("inventory").select("*");
    if (error) console.error("Error fetching inventory:", error);
    else setInventory(data);
  };

  // Handle input changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setNewItem((prev) => ({ ...prev, [name]: value }));
  };

  // Add new inventory item
  const addItem = async () => {
    if (!newItem.name || !newItem.category) return;
  
    const { data, error } = await supabase
      .from("inventory")
      .insert([
        {
          name: newItem.name,
          category: newItem.category,
          serial_number: newItem.serialNumber || null,
          batch_number: newItem.batchNumber || null,
          quantity: newItem.quantity,
        },
      ])
      .select(); // ðŸ‘ˆ Ensures Supabase returns inserted data
  
    if (error) {
      console.error("Error adding item:", error);
      return;
    }
  
    console.log("Inserted Data:", data); // Debugging
    setInventory((prev) => [...prev, ...(data || [])]); // ðŸ‘ˆ Ensure 'data' is iterable
    setNewItem({ name: "", category: "", serialNumber: "", batchNumber: "", quantity: 1 });
  };
  

  // Remove item from inventory
  const removeItem = async (id) => {
    const { error } = await supabase.from("inventory").delete().eq("id", id);
    if (error) {
      console.error("Error deleting item:", error);
    } else {
      setInventory(inventory.filter((item) => item.id !== id));
    }
  };

  return (
    <div className="container mx-auto max-w-3xl p-4">
      <h1 className="text-3xl font-bold text-primary mb-4">Inventory Management</h1>

      {/* Add New Item Form */}
      <div className="card bg-base-100 shadow-lg p-4 mb-6">
        <h2 className="text-xl font-semibold mb-3">Add New Item</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <input
            type="text"
            name="name"
            placeholder="Item Name"
            value={newItem.name}
            onChange={handleChange}
            className="input input-bordered w-full"
          />
          <input
            type="text"
            name="category"
            placeholder="Category (e.g., Power Tool, Material)"
            value={newItem.category}
            onChange={handleChange}
            className="input input-bordered w-full"
          />
          <input
            type="text"
            name="serialNumber"
            placeholder="Serial Number (Optional)"
            value={newItem.serialNumber}
            onChange={handleChange}
            className="input input-bordered w-full"
          />
          <input
            type="text"
            name="batchNumber"
            placeholder="Batch Number (Optional)"
            value={newItem.batchNumber}
            onChange={handleChange}
            className="input input-bordered w-full"
          />
          <input
            type="number"
            name="quantity"
            placeholder="Quantity"
            value={newItem.quantity}
            onChange={handleChange}
            className="input input-bordered w-full"
            min="1"
          />
          <button onClick={addItem} className="btn btn-success w-full">
            <FaPlus /> Add Item
          </button>
        </div>
      </div>

      {/* Inventory List */}
      <div className="card bg-base-100 shadow-lg p-4">
        <h2 className="text-xl font-semibold mb-4">Inventory List</h2>
        {inventory.length === 0 ? (
          <p className="text-gray-500 italic">No items in inventory.</p>
        ) : (
          <div className="overflow-x-auto">
            <table className="table w-full">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Category</th>
                  <th>Serial #</th>
                  <th>Batch #</th>
                  <th>Quantity</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {inventory.map((item) => (
                  <tr key={item.id}>
                    <td>{item.name}</td>
                    <td>{item.category}</td>
                    <td>{item.serial_number || "N/A"}</td>
                    <td>{item.batch_number || "N/A"}</td>
                    <td>{item.quantity}</td>
                    <td>
                      <button onClick={() => removeItem(item.id)} className="btn btn-sm btn-error">
                        <FaTrash />
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>
    </div>
  );
};

export default InventoryManagement;
