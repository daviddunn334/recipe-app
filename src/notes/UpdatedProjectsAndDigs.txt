import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import supabase from "../supabase"; // Import Supabase client

const ProjectsAndDigs = () => {
  const [clients, setClients] = useState([]); // Store clients list
  const [showModal, setShowModal] = useState(false);
  const [clientName, setClientName] = useState("");
  const [contactPerson, setContactPerson] = useState("");
  const [contactEmail, setContactEmail] = useState("");
  const [contactPhone, setContactPhone] = useState("");
  const [address, setAddress] = useState("");
  const [notes, setNotes] = useState("");
  const [error, setError] = useState("");

  // ðŸ”¹ Fetch clients from Supabase on page load
  useEffect(() => {
    fetchClients();
  }, []);

  const fetchClients = async () => {
    const { data, error } = await supabase.from("clients").select("*").order("created_at", { ascending: false });

    if (error) {
      console.error("Error fetching clients:", error.message);
    } else {
      setClients(data); // Update state with fetched clients
    }
  };

  // ðŸ”¹ Add a new client to Supabase
  const handleAddClient = async () => {
    if (!clientName) {
      setError("Client name is required.");
      return;
    }

    const { data, error } = await supabase.from("clients").insert([
      {
        name: clientName,
        contact_person: contactPerson || null,
        contact_email: contactEmail || null,
        contact_phone: contactPhone || null,
        address: address || null,
        notes: notes || null,
      },
    ]).select(); // Fetch the newly inserted client

    if (error) {
      setError(`Error adding client: ${error.message}`);
      return;
    }

    if (data) {
      setClients([data[0], ...clients]); // Add new client to UI instantly
    }

    // Clear form and close modal
    setClientName("");
    setContactPerson("");
    setContactEmail("");
    setContactPhone("");
    setAddress("");
    setNotes("");
    setShowModal(false);
  };

  return (
    <div className="max-w-5xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Select a Pipeline Company</h1>

      {/* Grid of client cards */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
        {clients.map((client) => (
          <Link
            key={client.id}
            to={`/projects/${client.id}`}
            className="card bg-primary text-primary-content p-6 rounded shadow hover:bg-primary-focus transition"
          >
            <h2 className="text-lg font-semibold">{client.name}</h2>
          </Link>
        ))}
      </div>

      {/* Add Client Button */}
      <div className="mt-6 text-center">
        <button
          onClick={() => setShowModal(true)}
          className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
        >
          + Add New Client
        </button>
      </div>

      {/* Add Client Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
          <div className="bg-white p-6 rounded shadow-lg w-96">
            <h2 className="text-xl font-bold mb-4">Add New Client</h2>
            
            {error && <p className="text-red-500">{error}</p>}

            <input
              type="text"
              placeholder="Client Name"
              value={clientName}
              onChange={(e) => setClientName(e.target.value)}
              className="w-full p-2 border rounded mb-2"
              required
            />
            <input
              type="text"
              placeholder="Contact Person (Optional)"
              value={contactPerson}
              onChange={(e) => setContactPerson(e.target.value)}
              className="w-full p-2 border rounded mb-2"
            />
            <input
              type="email"
              placeholder="Contact Email (Optional)"
              value={contactEmail}
              onChange={(e) => setContactEmail(e.target.value)}
              className="w-full p-2 border rounded mb-2"
            />
            <input
              type="text"
              placeholder="Contact Phone (Optional)"
              value={contactPhone}
              onChange={(e) => setContactPhone(e.target.value)}
              className="w-full p-2 border rounded mb-2"
            />
            <input
              type="text"
              placeholder="Address (Optional)"
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              className="w-full p-2 border rounded mb-2"
            />
            <textarea
              placeholder="Notes (Optional)"
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              className="w-full p-2 border rounded mb-2"
            />

            <div className="flex justify-between mt-4">
              <button
                onClick={handleAddClient}
                className="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600"
              >
                Save
              </button>
              <button
                onClick={() => setShowModal(false)}
                className="bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ProjectsAndDigs;
